"use strict";
import { convexToJson } from "./value.js";
class BaseValidator {
  constructor({ isOptional }) {
    this.isOptional = isOptional;
    this.isConvexValidator = true;
  }
  /** @deprecated - use isOptional instead */
  get optional() {
    return this.isOptional === "optional" ? true : false;
  }
}
export class VId extends BaseValidator {
  constructor({
    isOptional,
    tableName
  }) {
    super({ isOptional });
    this.kind = "id";
    this.tableName = tableName;
  }
  /** @internal */
  get json() {
    return { type: "id", tableName: this.tableName };
  }
  /** @internal */
  asOptional() {
    return new VId({
      isOptional: "optional",
      tableName: this.tableName
    });
  }
}
export class VFloat64 extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "float64";
  }
  /** @internal */
  get json() {
    return { type: "number" };
  }
  /** @internal */
  asOptional() {
    return new VFloat64({
      isOptional: "optional"
    });
  }
}
export class VInt64 extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "int64";
  }
  /** @internal */
  get json() {
    return { type: "bigint" };
  }
  /** @internal */
  asOptional() {
    return new VInt64({ isOptional: "optional" });
  }
}
export class VBoolean extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "boolean";
  }
  /** @internal */
  get json() {
    return { type: this.kind };
  }
  /** @internal */
  asOptional() {
    return new VBoolean({
      isOptional: "optional"
    });
  }
}
export class VBytes extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "bytes";
  }
  /** @internal */
  get json() {
    return { type: this.kind };
  }
  /** @internal */
  asOptional() {
    return new VBytes({ isOptional: "optional" });
  }
}
export class VString extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "string";
  }
  /** @internal */
  get json() {
    return { type: this.kind };
  }
  /** @internal */
  asOptional() {
    return new VString({
      isOptional: "optional"
    });
  }
}
export class VNull extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "null";
  }
  /** @internal */
  get json() {
    return { type: this.kind };
  }
  /** @internal */
  asOptional() {
    return new VNull({ isOptional: "optional" });
  }
}
export class VAny extends BaseValidator {
  constructor() {
    super(...arguments);
    this.kind = "any";
  }
  /** @internal */
  get json() {
    return {
      type: this.kind
    };
  }
  /** @internal */
  asOptional() {
    return new VAny({
      isOptional: "optional"
    });
  }
}
export class VObject extends BaseValidator {
  constructor({
    isOptional,
    fields
  }) {
    super({ isOptional });
    this.kind = "object";
    this.fields = fields;
  }
  /** @internal */
  get json() {
    return {
      type: this.kind,
      value: globalThis.Object.fromEntries(
        globalThis.Object.entries(this.fields).map(([k, v]) => [
          k,
          {
            fieldType: v.json,
            optional: v.isOptional === "optional" ? true : false
          }
        ])
      )
    };
  }
  /** @internal */
  asOptional() {
    return new VObject({
      isOptional: "optional",
      fields: this.fields
    });
  }
}
export class VLiteral extends BaseValidator {
  constructor({ isOptional, value }) {
    super({ isOptional });
    this.kind = "literal";
    this.value = value;
  }
  /** @internal */
  get json() {
    return {
      type: this.kind,
      value: convexToJson(this.value)
    };
  }
  /** @internal */
  asOptional() {
    return new VLiteral({
      isOptional: "optional",
      value: this.value
    });
  }
}
export class VArray extends BaseValidator {
  constructor({
    isOptional,
    element
  }) {
    super({ isOptional });
    this.kind = "array";
    this.element = element;
  }
  /** @internal */
  get json() {
    return {
      type: this.kind,
      value: this.element.json
    };
  }
  /** @internal */
  asOptional() {
    return new VArray({
      isOptional: "optional",
      element: this.element
    });
  }
}
export class VRecord extends BaseValidator {
  constructor({
    isOptional,
    key,
    value
  }) {
    super({ isOptional });
    this.kind = "record";
    this.key = key;
    this.value = value;
  }
  /** @internal */
  get json() {
    return {
      type: this.kind,
      keys: this.key.json,
      values: {
        fieldType: this.value.json,
        optional: false
      }
    };
  }
  /** @internal */
  asOptional() {
    return new VRecord({
      isOptional: "optional",
      key: this.key,
      value: this.value
    });
  }
}
export class VUnion extends BaseValidator {
  constructor({ isOptional, members }) {
    super({ isOptional });
    this.kind = "union";
    this.members = members;
  }
  /** @internal */
  get json() {
    return {
      type: this.kind,
      value: this.members.map((v) => v.json)
    };
  }
  /** @internal */
  asOptional() {
    return new VUnion({
      isOptional: "optional",
      members: this.members
    });
  }
}
//# sourceMappingURL=validators.js.map
