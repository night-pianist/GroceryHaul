"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var components_exports = {};
__export(components_exports, {
  appGeneric: () => appGeneric,
  componentGeneric: () => componentGeneric,
  currentSystemUdfInComponent: () => currentSystemUdfInComponent,
  defineApp: () => defineApp,
  defineComponent: () => defineComponent
});
module.exports = __toCommonJS(components_exports);
var import_values = require("../../values/index.js");
var import_reference = require("./reference.js");
class InstalledComponent {
  constructor(definition, name) {
    this._definition = definition;
    this[import_reference.toReferencePath] = `_reference/childComponent/${name}`;
  }
}
import_reference.toReferencePath;
function install(definition, options = {}) {
  const importedComponentDefinition = definition;
  if (typeof importedComponentDefinition.componentDefinitionPath !== "string") {
    throw new Error(
      "Component definition does not have the required componentDefinitionPath property. This code only works in Convex runtime."
    );
  }
  const name = options.name || importedComponentDefinition.componentDefinitionPath.split("/").pop();
  this._childComponents.push([
    name,
    importedComponentDefinition,
    options.args || {}
  ]);
  return new InstalledComponent(definition, name);
}
function mountHttp(pathPrefix, component) {
  if (!pathPrefix.startsWith("/")) {
    throw new Error(`Path prefix '${pathPrefix}' does not start with a /`);
  }
  if (!pathPrefix.endsWith("/")) {
    throw new Error(`Path prefix '${pathPrefix}' must end with a /`);
  }
  if (this._httpMounts[pathPrefix]) {
    throw new Error(`Path '${pathPrefix}' is already mounted.`);
  }
  const path = (0, import_reference.extractReferencePath)(component);
  if (!path) {
    throw new Error("`mountHttp` must be called with an `InstalledComponent`.");
  }
  this._httpMounts[pathPrefix] = path;
}
function exportAppForAnalysis() {
  const definitionType = { type: "app" };
  const childComponents = serializeChildComponents(this._childComponents);
  return {
    definitionType,
    childComponents,
    httpMounts: this._httpMounts,
    exports: { type: "branch", branch: [] }
  };
}
function serializeChildComponents(childComponents) {
  return childComponents.map(([name, definition, p]) => {
    const args = [];
    for (const [name2, value] of Object.entries(p)) {
      args.push([
        name2,
        { type: "value", value: JSON.stringify((0, import_values.convexToJson)(value)) }
      ]);
    }
    const path = definition.componentDefinitionPath;
    if (!path)
      throw new Error(
        "no .componentPath for component definition " + JSON.stringify(definition, null, 2)
      );
    return {
      name,
      path,
      args
    };
  });
}
function exportComponentForAnalysis() {
  const args = Object.entries(
    this._args
  ).map(([name, validator]) => [
    name,
    {
      type: "value",
      value: JSON.stringify(validator.json)
    }
  ]);
  const definitionType = {
    type: "childComponent",
    name: this._name,
    args
  };
  const childComponents = serializeChildComponents(this._childComponents);
  return {
    name: this._name,
    definitionType,
    childComponents,
    httpMounts: this._httpMounts,
    exports: { type: "branch", branch: [] }
  };
}
function defineComponent(name, options = {}) {
  const ret = {
    _isRoot: false,
    _name: name,
    _args: options.args || {},
    _childComponents: [],
    _httpMounts: {},
    export: exportComponentForAnalysis,
    install,
    mountHttp,
    // pretend to conform to ComponentDefinition, which temporarily expects __args
    ...{}
  };
  return ret;
}
function defineApp() {
  const ret = {
    _isRoot: true,
    _childComponents: [],
    _httpMounts: {},
    export: exportAppForAnalysis,
    install,
    mountHttp
  };
  return ret;
}
function currentSystemUdfInComponent(componentId) {
  return {
    [import_reference.toReferencePath]: `_reference/currentSystemUdfInComponent/${componentId}`
  };
}
function createChildComponents(root, pathParts) {
  const handler = {
    get(_, prop) {
      if (typeof prop === "string") {
        const newParts = [...pathParts, prop];
        return createChildComponents(root, newParts);
      } else if (prop === import_reference.toReferencePath) {
        if (pathParts.length < 1) {
          const found = [root, ...pathParts].join(".");
          throw new Error(
            `API path is expected to be of the form \`${root}.childComponent.functionName\`. Found: \`${found}\``
          );
        }
        return `_reference/childComponent/` + pathParts.join("/");
      } else {
        return void 0;
      }
    }
  };
  return new Proxy({}, handler);
}
const appGeneric = () => createChildComponents("app", []);
const componentGeneric = () => createChildComponents("component", []);
//# sourceMappingURL=index.js.map
